// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique
  password   String
  name       String
  phone      String?
  role       UserRole   @default(USER)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  accounts        Account[]
  transactions    Transaction[] @relation("performedBy")
}

model Account {
  id            Int           @id @default(autoincrement())
  accountNumber String        @unique
  balance       Decimal       @default(0.00) @db.Decimal(14, 2)
  status        AccountStatus @default(ACTIVE)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  userId  Int
  user    User          @relation(fields: [userId], references: [id])

  // relasi transaksi
  transactionsFrom Transaction[] @relation("fromAccount")
  transactionsTo   Transaction[] @relation("toAccount")

  @@index([userId])
}

model Transaction {
  id            Int              @id @default(autoincrement())
  type          TransactionType
  amount        Decimal           @db.Decimal(14, 2)
  description   String?
  createdAt     DateTime          @default(now())

  // Deposit/Withdraw/Transfer
  fromAccountId Int?
  toAccountId   Int?

  fromAccount   Account? @relation("fromAccount", fields: [fromAccountId], references: [id])
  toAccount     Account? @relation("toAccount",   fields: [toAccountId], references: [id])

  performedById Int
  performedBy   User     @relation("performedBy", fields: [performedById], references: [id])

  @@index([createdAt])
  @@index([performedById])
  @@index([fromAccountId])
  @@index([toAccountId])
}

enum UserRole {
  USER
  ADMIN
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  CLOSED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
}
